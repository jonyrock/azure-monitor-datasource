{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./time_grain_converter.ts","webpack:///external \"moment\"","webpack:///../node_modules/style-loader/lib/addStyles.js","webpack:///./module.ts","webpack:///./datasource.ts","webpack:///./azure_monitor/azure_monitor_datasource.ts","webpack:///./azure_monitor/azure_monitor_filter_builder.ts","webpack:///./azure_monitor/url_builder.ts","webpack:///./azure_monitor/response_parser.ts","webpack:///./azure_monitor/supported_namespaces.ts","webpack:///./app_insights/app_insights_datasource.ts","webpack:///./app_insights/app_insights_querystring_builder.ts","webpack:///./app_insights/response_parser.ts","webpack:///./query_ctrl.ts","webpack:///external \"app/plugins/sdk\"","webpack:///./css/query_editor.css?bf45","webpack:///./css/query_editor.css?2dcc","webpack:///./css/query_editor.css","webpack:///../node_modules/css-loader/lib/css-base.js","webpack:///../node_modules/style-loader/lib/urls.js","webpack:///./config_ctrl.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","TimeGrainConverter","timeGrain","timeGrainUnit","_lodash2","default","includes","toUpperCase","interval","slice","length","unit","indexOf","createISO8601Duration","toMinutes","allowedTimeGrains","timeGrains","filter","closest","intervalMs","_kbn2","interval_to_ms","duration","offset","substring","timeUnitToText","text","timeUnitToKbn","__WEBPACK_EXTERNAL_MODULE__2__","fn","memo","stylesInDom","isOldIE","window","document","all","atob","apply","this","arguments","getElement","target","styleTarget","querySelector","HTMLIFrameElement","contentDocument","head","e","singleton","singletonCounter","stylesInsertedAtTop","fixUrls","addStylesToDom","styles","options","item","domStyle","id","refs","j","parts","push","addStyle","listToStyles","list","newStyles","base","part","css","media","sourceMap","insertStyleElement","style","insertInto","Error","lastStyleElementInsertedAtTop","insertAt","nextSibling","insertBefore","appendChild","firstChild","before","removeStyleElement","parentNode","removeChild","idx","splice","createStyleElement","createElement","undefined","attrs","type","addAttrs","el","keys","forEach","key","setAttribute","obj","update","remove","result","transform","styleIndex","applyToSingletonTag","bind","URL","createObjectURL","revokeObjectURL","Blob","btoa","link","rel","createLinkElement","autoFixUrls","convertToAbsoluteUrls","unescape","encodeURIComponent","JSON","stringify","blob","oldSrc","href","styleSheet","cssText","createTextNode","newObj","DEBUG","newList","mayRemove","textStore","replaceText","index","replacement","Boolean","join","cssNode","childNodes","_query_ctrl","_config_ctrl","AzureMonitorQueryOptionsCtrl","templateUrl","AzureMonitorAnnotationsQueryCtrl","Datasource","_datasource2","QueryCtrl","AzureMonitorQueryCtrl","ConfigCtrl","AzureMonitorConfigCtrl","QueryOptionsCtrl","AnnotationsQueryCtrl","instanceSettings","backendSrv","templateSrv","$q","azureMonitorDatasource","_azure_monitor_datasource2","appInsightsDatasource","_app_insights_datasource2","$inject","promises","azureMonitorOptions","cloneDeep","appInsightsTargets","targets","query","then","results","data","flatten","Promise","resolve","aiResult","metricFindQuery","amResult","isConfigured","testDatasource","status","message","title","upperFirst","getResourceGroups","resourceGroup","getMetricDefinitions","metricDefinition","getResourceNames","resourceName","getMetricNames","metricName","getMetricMetadata","AzureMonitorDatasource","apiVersion","defaultDropdownValue","supportedMetricNamespaces","subscriptionId","jsonData","cloudName","baseUrl","url","_supported_namespaces2","queries","hide","azureMonitor","_this","map","_time_grain_converter2","replace","scopedVars","toString","filterBuilder","_azure_monitor_filter_builder2","range","from","to","setAllowedTimeGrains","aggregation","setAggregation","dimension","setDimensionFilter","dimensionFilter","generateFilter","_url_builder2","buildAzureMonitorQueryUrl","refId","maxDataPoints","datasourceId","format","alias","when","doQueries","_response_parser2","parseQueryResult","_this2","doRequest","catch","err","error","match","metricDefinitionsQuery","toVariable","resourceNamesQuery","metricNamesQuery","_resourceGroup","_metricDefinition","metric","trim","parseResponseValues","t","_this3","startsWith","toLowerCase","shouldHardcodeBlobStorage","parseResourceNames","buildAzureMonitorGetMetricNamesUrl","parseMetadata","isValidConfigField","tenantId","clientId","response","statusText","code","field","datasourceRequest","method","maxRetries","_this4","AzureMonitorFilterBuilder","grafanaInterval","timeGrainInterval","tg","createKbnUnitFromISO8601Duration","agg","createDatetimeAndTimeGrainConditions","dateTimeCondition","utc","calculateAutoTimeGrain","roundedInterval","findClosestTimeGrain","createISO8601DurationFromInterval","rn","split","service","lastIndexOf","ResponseParser","k","timeseries","createTarget","metadatavalues","datapoints","convertDataToPoints","parseResourceGroupFromId","parseResourceNameFromId","namespace","parseNamespaceFromId","g1","g2","group","startIndex","endIndex","timeSeriesData","dataPoints","epoch","dateTimeToEpoch","timeStamp","aggKey","getKeyForAggregationField","dateTime","_moment2","valueOf","dataObj","intersection","textFieldName","valueFieldName","find","metricData","primaryAggType","primaryAggregationType","supportedAggTypes","supportedAggregationTypes","supportedTimeGrains","parseTimeGrains","metricAvailabilities","dimensions","parseDimensions","avail","createTimeGrainFromISO8601Duration","isDimensionRequired","localizedValue","SupportedNamespaces","azuremonitor","govazuremonitor","germanyazuremonitor","chinaazuremonitor","AppInsightsDatasource","version","applicationId","appInsightsAppId","appInsights","querystringBuilder","_app_insights_querystring_builder2","groupBy","setGroupBy","setInterval","timeGrainType","setFilter","generate","appInsightsGroupByQuery","getGroupBys","parseMetricNames","parseGroupBys","AppInsightsQuerystringBuilder","querystring","concat","parseQueryResultRow","isSingleValue","getMetricFieldKey","aggField","end","hasSegmentsField","segments","_i","_epoch2","_metricName2","_aggField2","getTargetName","findOrCreateBucket","_metricName","dataTarget","_epoch","_aggField","segment","segmentName","segmentValue","prop","isObject","metrics","defaultAggregation","supportedAggregations","supportedGroupBy","toTextValueList","without","values","_classCallCheck","_possibleConstructorReturn","__proto__","getPrototypeOf","$scope","$injector","defaults","queryType","defaultsDeep","migrateTimeGrains","panelCtrl","events","on","onDataReceived","onDataError","_inherits","_QueryCtrl","dataList","lastQueryError","onMetricNameChange","variable","panel","datasource","metadata","aggOptions","refresh","getAppInsightsMetricMetadata","aggData","groupByOptions","option","_sdk","content","hmr","locals","sources","names","mappings","file","sourcesContent","sourceRoot","useSourceMap","cssMapping","sourceMapping","sourceURLs","source","cssWithMappingToString","mediaQuery","alreadyImportedModules","location","currentDir","pathname","fullMatch","origUrl","newUrl","unquotedOrigUrl","$1","test","instance","Constructor","TypeError"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import _ from 'lodash';\nimport moment from 'moment';\nimport kbn from 'grafana/app/core/utils/kbn';\n\nexport default class TimeGrainConverter {\n  static createISO8601Duration(timeGrain, timeGrainUnit) {\n    const timeIntervals = ['hour', 'minute', 'h', 'm'];\n    if (_.includes(timeIntervals, timeGrainUnit)) {\n      return `PT${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n    }\n\n    return `P${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n  }\n\n  static createISO8601DurationFromInterval(interval: string) {\n    const timeGrain = +interval.slice(0, interval.length - 1);\n    const unit = interval[interval.length - 1];\n\n    if (interval.indexOf('ms') > -1) {\n      return TimeGrainConverter.createISO8601Duration(1, 'm');\n    }\n\n    if (interval[interval.length - 1] === 's') {\n      let toMinutes = (timeGrain * 60) % 60;\n\n      if (toMinutes < 1) {\n        toMinutes = 1;\n      }\n\n      return TimeGrainConverter.createISO8601Duration(toMinutes, 'm');\n    }\n\n    return TimeGrainConverter.createISO8601Duration(timeGrain, unit);\n  }\n\n  static findClosestTimeGrain(interval, allowedTimeGrains) {\n    const timeGrains = _.filter(allowedTimeGrains, o => { return o !== 'auto'; });\n\n    let closest = timeGrains[0];\n    const intervalMs = kbn.interval_to_ms(interval);\n\n    for (let i = 0; i < timeGrains.length; i++) {\n      // abs (num - val) < abs (num - curr):\n      if (intervalMs > kbn.interval_to_ms(timeGrains[i])) {\n        if ((i + 1) < timeGrains.length) {\n          closest = timeGrains[i + 1];\n        } else {\n          closest = timeGrains[i];\n        }\n      }\n    }\n\n    return closest;\n  }\n\n  static createTimeGrainFromISO8601Duration(duration: string) {\n    let offset = 1;\n    if (duration.substring(0,2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length-1);\n    const unit = duration.substring(duration.length-1);\n\n    return value + ' ' + TimeGrainConverter.timeUnitToText(+value, unit);\n  }\n\n  static timeUnitToText(value: number, unit: string) {\n    let text = '';\n\n    if (unit === 'S') { text = 'second'; }\n    if (unit === 'M') { text = 'minute'; }\n    if (unit === 'H') { text = 'hour'; }\n    if (unit === 'D') { text = 'day'; }\n\n    if ( value > 1) {\n      return text + 's';\n    }\n\n    return text;\n  }\n\n  static createKbnUnitFromISO8601Duration(duration: string) {\n    if (duration === 'auto') {\n      return 'auto';\n    }\n\n    let offset = 1;\n    if (duration.substring(0,2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length-1);\n    const unit = duration.substring(duration.length-1);\n\n    return value + TimeGrainConverter.timeUnitToKbn(+value, unit);\n  }\n\n  static timeUnitToKbn(value: number, unit: string) {\n      if (unit === 'S') { return 's'; }\n      if (unit === 'M') { return 'm'; }\n      if (unit === 'H') { return 'h'; }\n      if (unit === 'D') { return 'd'; }\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target) {\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = require(\"./urls\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n","import Datasource from './datasource';\nimport { AzureMonitorQueryCtrl } from './query_ctrl';\nimport { AzureMonitorConfigCtrl } from './config_ctrl';\n\nclass AzureMonitorQueryOptionsCtrl {\n  static templateUrl = 'partials/query.options.html';\n}\n\nclass AzureMonitorAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  Datasource,\n  AzureMonitorQueryCtrl as QueryCtrl,\n  AzureMonitorConfigCtrl as ConfigCtrl,\n  AzureMonitorQueryOptionsCtrl as QueryOptionsCtrl,\n  AzureMonitorAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\nimport AppInsightsDatasource from './app_insights/app_insights_datasource';\n\nexport default class Datasource {\n  id: number;\n  name: string;\n  azureMonitorDatasource: AzureMonitorDatasource;\n  appInsightsDatasource: AppInsightsDatasource;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private templateSrv, private $q) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.azureMonitorDatasource = new AzureMonitorDatasource(\n      instanceSettings,\n      this.backendSrv,\n      this.templateSrv,\n      this.$q\n    );\n    this.appInsightsDatasource = new AppInsightsDatasource(\n      instanceSettings,\n      this.backendSrv,\n      this.templateSrv,\n      this.$q\n    );\n  }\n\n  query(options) {\n    const promises: any[] = [];\n    const azureMonitorOptions = _.cloneDeep(options);\n    const appInsightsTargets = _.cloneDeep(options);\n\n    azureMonitorOptions.targets = _.filter(azureMonitorOptions.targets, ['queryType', 'Azure Monitor']);\n    appInsightsTargets.targets = _.filter(appInsightsTargets.targets, ['queryType', 'Application Insights']);\n\n    if (azureMonitorOptions.targets.length > 0) {\n      promises.push(this.azureMonitorDatasource.query(azureMonitorOptions));\n    }\n\n    if (appInsightsTargets.targets.length > 0) {\n      promises.push(this.appInsightsDatasource.query(appInsightsTargets));\n    }\n\n    return this.$q.all(promises).then(results => {\n      return { data: _.flatten(results) };\n    });\n  }\n\n  annotationQuery(options) {\n    throw new Error('Annotation Support not implemented yet.');\n  }\n\n  metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const aiResult = this.appInsightsDatasource.metricFindQuery(query);\n    if (aiResult) {\n      return aiResult;\n    }\n\n    const amResult = this.azureMonitorDatasource.metricFindQuery(query);\n    if (amResult) {\n      return amResult;\n    }\n\n    return Promise.resolve([]);\n  }\n\n  testDatasource() {\n    const promises: any[] = [];\n\n    if (this.azureMonitorDatasource.isConfigured()) {\n      promises.push(this.azureMonitorDatasource.testDatasource());\n    }\n\n    if (this.appInsightsDatasource.isConfigured()) {\n      promises.push(this.appInsightsDatasource.testDatasource());\n    }\n\n    if (promises.length === 0) {\n      return {\n        status: 'error',\n        message: `Nothing configured. At least one of the API's must be configured.`,\n        title: 'Error',\n      };\n    }\n\n    return this.$q.all(promises).then(results => {\n      let status = 'success';\n      let message = '';\n\n      for (let i = 0; i < results.length; i++) {\n        if (results[i].status !== 'success') {\n          status = results[i].status;\n        }\n        message += `${i + 1}. ${results[i].message} `;\n      }\n\n      return {\n        status: status,\n        message: message,\n        title: _.upperFirst(status),\n      };\n    });\n  }\n\n  /* Azure Monitor REST API methods */\n  getResourceGroups() {\n    return this.azureMonitorDatasource.getResourceGroups();\n  }\n\n  getMetricDefinitions(resourceGroup: string) {\n    return this.azureMonitorDatasource.getMetricDefinitions(resourceGroup);\n  }\n\n  getResourceNames(resourceGroup: string, metricDefinition: string) {\n    return this.azureMonitorDatasource.getResourceNames(resourceGroup, metricDefinition);\n  }\n\n  getMetricNames(resourceGroup: string, metricDefinition: string, resourceName: string) {\n    return this.azureMonitorDatasource.getMetricNames(resourceGroup, metricDefinition, resourceName);\n  }\n\n  getMetricMetadata(resourceGroup: string, metricDefinition: string, resourceName: string, metricName: string) {\n    return this.azureMonitorDatasource.getMetricMetadata(resourceGroup, metricDefinition, resourceName, metricName);\n  }\n\n  /* Application Insights API method */\n  getAppInsightsMetricNames() {\n    return this.appInsightsDatasource.getMetricNames();\n  }\n\n  getAppInsightsMetricMetadata(metricName) {\n    return this.appInsightsDatasource.getMetricMetadata(metricName);\n  }\n}\n","import _ from 'lodash';\nimport AzureMonitorFilterBuilder from './azure_monitor_filter_builder';\nimport UrlBuilder from './url_builder';\nimport ResponseParser from './response_parser';\nimport SupportedNamespaces from './supported_namespaces';\nimport TimegrainConverter from '../time_grain_converter';\n\nexport default class AzureMonitorDatasource {\n  apiVersion = '2018-01-01';\n  id: number;\n  subscriptionId: string;\n  baseUrl: string;\n  resourceGroup: string;\n  resourceName: string;\n  url: string;\n  defaultDropdownValue = 'select';\n  cloudName: string;\n  supportedMetricNamespaces: any[] = [];\n\n  constructor(private instanceSettings, private backendSrv, private templateSrv, private $q) {\n    this.id = instanceSettings.id;\n    this.subscriptionId = instanceSettings.jsonData.subscriptionId;\n    this.cloudName = instanceSettings.jsonData.cloudName || 'azuremonitor';\n    this.baseUrl = `/${this.cloudName}/subscriptions/${this.subscriptionId}/resourceGroups`;\n    this.url = instanceSettings.url;\n\n    this.supportedMetricNamespaces = new SupportedNamespaces(this.cloudName).get();\n  }\n\n  isConfigured() {\n    return this.subscriptionId && this.subscriptionId.length > 0;\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, item => {\n      return (\n        item.hide !== true &&\n        item.azureMonitor.resourceGroup &&\n        item.azureMonitor.resourceGroup !== this.defaultDropdownValue &&\n        item.azureMonitor.resourceName &&\n        item.azureMonitor.resourceName !== this.defaultDropdownValue &&\n        item.azureMonitor.metricDefinition &&\n        item.azureMonitor.metricDefinition !== this.defaultDropdownValue &&\n        item.azureMonitor.metricName &&\n        item.azureMonitor.metricName !== this.defaultDropdownValue\n      );\n    }).map(target => {\n      const item = target.azureMonitor;\n\n      if (item.timeGrainUnit && item.timeGrain !== 'auto') {\n        item.timeGrain = TimegrainConverter.createISO8601Duration(\n          item.timeGrain,\n          item.timeGrainUnit\n        );\n      }\n\n      const resourceGroup = this.templateSrv.replace(item.resourceGroup, options.scopedVars);\n      const resourceName = this.templateSrv.replace(item.resourceName, options.scopedVars);\n      const metricDefinition = this.templateSrv.replace(item.metricDefinition, options.scopedVars);\n      const metricName = this.templateSrv.replace(item.metricName, options.scopedVars);\n      const timeGrain = this.templateSrv.replace((item.timeGrain || '').toString(), options.scopedVars);\n\n      const filterBuilder = new AzureMonitorFilterBuilder(\n        item.metricName,\n        options.range.from,\n        options.range.to,\n        timeGrain,\n        options.interval\n      );\n\n      if (item.timeGrains) {\n        filterBuilder.setAllowedTimeGrains(item.timeGrains);\n      }\n\n      if (item.aggregation) {\n        filterBuilder.setAggregation(item.aggregation);\n      }\n\n      if (item.dimension && item.dimension !== 'None') {\n        filterBuilder.setDimensionFilter(item.dimension, item.dimensionFilter);\n      }\n\n      const filter = this.templateSrv.replace(filterBuilder.generateFilter(), options.scopedVars);\n\n      const url = UrlBuilder.buildAzureMonitorQueryUrl(\n        this.baseUrl,\n        resourceGroup,\n        metricDefinition,\n        resourceName,\n        this.apiVersion,\n        filter\n      );\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        url: url,\n        format: options.format,\n        alias: item.alias,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    const promises = this.doQueries(queries);\n\n    return this.$q.all(promises).then(results => {\n      return new ResponseParser(results).parseQueryResult();\n    });\n  }\n\n  doQueries(queries) {\n    return _.map(queries, query => {\n      return this.doRequest(query.url).then(result => {\n        return {\n          result: result,\n          query: query,\n        };\n      }).catch(err => {\n        throw {\n          error: err,\n          query: query\n        };\n      });\n    });\n  }\n\n  annotationQuery(options) {}\n\n  metricFindQuery(query: string) {\n    const resourceGroupsQuery = query.match(/^ResourceGroups\\(\\)/i);\n    if (resourceGroupsQuery) {\n      return this.getResourceGroups();\n    }\n\n    const metricDefinitionsQuery = query.match(/^Namespaces\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (metricDefinitionsQuery) {\n      return this.getMetricDefinitions(this.toVariable(metricDefinitionsQuery[1]));\n    }\n\n    const resourceNamesQuery = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?)\\)/i);\n    if (resourceNamesQuery) {\n      const resourceGroup = this.toVariable(resourceNamesQuery[1]);\n      const metricDefinition = this.toVariable(resourceNamesQuery[2]);\n      return this.getResourceNames(resourceGroup, metricDefinition);\n    }\n\n    const metricNamesQuery = query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i);\n\n    if (metricNamesQuery) {\n      const resourceGroup = this.toVariable(metricNamesQuery[1]);\n      const metricDefinition = this.toVariable(metricNamesQuery[2]);\n      const resourceName = this.toVariable(metricNamesQuery[3]);\n      return this.getMetricNames(resourceGroup, metricDefinition, resourceName);\n    }\n  }\n\n  toVariable(metric: string) {\n    return this.templateSrv.replace((metric || '').trim());\n  }\n\n  getResourceGroups() {\n    const url = `${this.baseUrl}?api-version=2018-01-01`;\n    return this.doRequest(url).then(result => {\n      return ResponseParser.parseResponseValues(result, 'name', 'name');\n    });\n  }\n\n  getMetricDefinitions(resourceGroup: string) {\n    const url = `${this.baseUrl}/${resourceGroup}/resources?api-version=2018-01-01`;\n    return this.doRequest(url)\n      .then(result => {\n        return ResponseParser.parseResponseValues(result, 'type', 'type');\n      })\n      .then(result => {\n        return _.filter(result, t => {\n          for (let i = 0; i < this.supportedMetricNamespaces.length; i++) {\n            if (_.startsWith(t.value.toLowerCase(), this.supportedMetricNamespaces[i].toLowerCase())) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n      })\n      .then(result => {\n        let shouldHardcodeBlobStorage = false;\n        for (let i = 0; i < result.length; i++) {\n          if (result[i].value === 'Microsoft.Storage/storageAccounts') {\n            shouldHardcodeBlobStorage = true;\n            break;\n          }\n        }\n\n        if (shouldHardcodeBlobStorage) {\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/blobServices',\n            value: 'Microsoft.Storage/storageAccounts/blobServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/fileServices',\n            value: 'Microsoft.Storage/storageAccounts/fileServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/tableServices',\n            value: 'Microsoft.Storage/storageAccounts/tableServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/queueServices',\n            value: 'Microsoft.Storage/storageAccounts/queueServices',\n          });\n        }\n\n        return result;\n      });\n  }\n\n  getResourceNames(resourceGroup: string, metricDefinition: string) {\n    const url = `${this.baseUrl}/${resourceGroup}/resources?api-version=2018-01-01`;\n\n    return this.doRequest(url).then(result => {\n      if (!_.startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/')) {\n        return ResponseParser.parseResourceNames(result, metricDefinition);\n      }\n\n      const list = ResponseParser.parseResourceNames(result, 'Microsoft.Storage/storageAccounts');\n      for (let i = 0; i < list.length; i++) {\n        list[i].text += '/default';\n        list[i].value += '/default';\n      }\n\n      return list;\n    });\n  }\n\n  getMetricNames(resourceGroup: string, metricDefinition: string, resourceName: string) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.baseUrl,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      this.apiVersion\n    );\n\n    return this.doRequest(url).then(result => {\n      return ResponseParser.parseResponseValues(result, 'name.localizedValue', 'name.value');\n    });\n  }\n\n  getMetricMetadata(resourceGroup: string, metricDefinition: string, resourceName: string, metricName: string) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.baseUrl,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      this.apiVersion\n    );\n\n    return this.doRequest(url).then(result => {\n      return ResponseParser.parseMetadata(result, metricName);\n    });\n  }\n\n  testDatasource() {\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n      return {\n        status: 'error',\n        message: 'The Tenant Id field is required.',\n      };\n    }\n\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n      return {\n        status: 'error',\n        message: 'The Client Id field is required.',\n      };\n    }\n\n    const url = `${this.baseUrl}?api-version=2018-01-01`;\n    return this.doRequest(url)\n      .then(response => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Azure Monitor service.',\n            title: 'Success',\n          };\n        }\n      })\n      .catch(error => {\n        let message = 'Azure Monitor: ';\n        message += error.statusText ? error.statusText + ': ' : '';\n\n        if (error.data && error.data.error && error.data.error.code) {\n          message += error.data.error.code + '. ' + error.data.error.message;\n        } else if (error.data && error.data.error) {\n          message += error.data.error;\n        } else if (error.data) {\n          message += error.data;\n        } else {\n          message += 'Cannot connect to Azure Monitor REST API.';\n        }\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  isValidConfigField(field: string) {\n    return field && field.length > 0;\n  }\n\n  doRequest(url, maxRetries = 1) {\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch(error => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n}\n","import _ from 'lodash';\nimport moment from 'moment';\nimport TimegrainConverter from '../time_grain_converter';\n\nexport default class AzureMonitorFilterBuilder {\n  aggregation: string;\n  timeGrainInterval = '';\n  dimension: string;\n  dimensionFilter: string;\n  allowedTimeGrains = ['1m', '5m', '15m', '30m', '1h', '6h', '12h', '1d'];\n\n  constructor(\n    private metricName: string,\n    private from,\n    private to,\n    public timeGrain: string,\n    public grafanaInterval: string) {\n  }\n\n  setAllowedTimeGrains(timeGrains) {\n    this.allowedTimeGrains = [];\n    timeGrains.forEach(tg => {\n      if (tg.value === 'auto') {\n        this.allowedTimeGrains.push(tg.value);\n      } else {\n        this.allowedTimeGrains.push(TimegrainConverter.createKbnUnitFromISO8601Duration(tg.value));\n      }\n    });\n  }\n\n  setAggregation(agg) {\n    this.aggregation = agg;\n  }\n\n  setDimensionFilter(dimension, dimensionFilter) {\n    this.dimension = dimension;\n    this.dimensionFilter = dimensionFilter;\n  }\n\n  generateFilter() {\n    let filter = this.createDatetimeAndTimeGrainConditions();\n\n    if (this.aggregation) {\n      filter += `&aggregation=${this.aggregation}`;\n    }\n\n    if (this.metricName && this.metricName.trim().length > 0) {\n      filter += `&metricnames=${this.metricName}`;\n    }\n\n    if (this.dimension && this.dimensionFilter && this.dimensionFilter.trim().length > 0) {\n      filter += `&$filter=${this.dimension} eq '${this.dimensionFilter}'`;\n    }\n\n    return filter;\n  }\n\n  createDatetimeAndTimeGrainConditions() {\n    const dateTimeCondition = `timespan=${this.from.utc().format()}/${this.to.utc().format()}`;\n\n    if (this.timeGrain === 'auto') {\n      this.timeGrain = this.calculateAutoTimeGrain();\n    }\n    const timeGrainCondition = `&interval=${this.timeGrain}`;\n\n    return dateTimeCondition + timeGrainCondition;\n  }\n\n  calculateAutoTimeGrain() {\n    const roundedInterval = TimegrainConverter.findClosestTimeGrain(this.grafanaInterval, this.allowedTimeGrains);\n\n    return TimegrainConverter.createISO8601DurationFromInterval(roundedInterval);\n  }\n}\n","import _ from 'lodash';\n\nexport default class UrlBuilder {\n  static buildAzureMonitorQueryUrl(baseUrl: string, resourceGroup: string, metricDefinition: string,\n    resourceName: string, apiVersion: string, filter: string) {\n\n    if (_.startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/') || metricDefinition === 'Microsoft.Sql/servers/databases') {\n      const rn = resourceName.split('/');\n      const service = metricDefinition.substring(metricDefinition.lastIndexOf('/') + 1);\n      const md = metricDefinition.substring(0, metricDefinition.lastIndexOf('/'));\n      return `${baseUrl}/${resourceGroup}/providers/${md}/${rn[0]}/${service}/${rn[1]}` +\n        `/providers/microsoft.insights/metrics?api-version=${apiVersion}&${filter}`;\n    }\n\n    return `${baseUrl}/${resourceGroup}/providers/${metricDefinition}/${resourceName}` +\n    `/providers/microsoft.insights/metrics?api-version=${apiVersion}&${filter}`;\n  }\n\n  static buildAzureMonitorGetMetricNamesUrl(baseUrl: string, resourceGroup: string, metricDefinition: string,\n    resourceName: string, apiVersion: string ) {\n    if (_.startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/') || metricDefinition === 'Microsoft.Sql/servers/databases') {\n      const rn = resourceName.split('/');\n      const service = metricDefinition.substring(metricDefinition.lastIndexOf('/') + 1);\n      const md = metricDefinition.substring(0, metricDefinition.lastIndexOf('/'));\n      return `${baseUrl}/${resourceGroup}/providers/${md}/${rn[0]}/${service}/${rn[1]}` +\n        `/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}`;\n    }\n\n    return `${baseUrl}/${resourceGroup}/providers/${metricDefinition}/${resourceName}` +\n      `/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}`;\n  }\n}\n","import moment from 'moment';\nimport _ from 'lodash';\nimport TimeGrainConverter from '../time_grain_converter';\n\nexport default class ResponseParser {\n  constructor(private results) {}\n\n  parseQueryResult() {\n    const data: any[] = [];\n    for (let i = 0; i < this.results.length; i++) {\n      for (let j = 0; j < this.results[i].result.data.value.length; j++) {\n        for (let k = 0; k < this.results[i].result.data.value[j].timeseries.length; k++) {\n          const alias = this.results[i].query.alias;\n          data.push({\n            target: ResponseParser.createTarget(\n              this.results[i].result.data.value[j],\n              this.results[i].result.data.value[j].timeseries[k].metadatavalues,\n              alias\n            ),\n            datapoints: ResponseParser.convertDataToPoints(this.results[i].result.data.value[j].timeseries[k].data)\n          });\n        }\n      }\n    }\n    return data;\n  }\n\n  static createTarget(data, metadatavalues, alias: string) {\n    const resourceGroup = ResponseParser.parseResourceGroupFromId(data.id);\n    const resourceName = ResponseParser.parseResourceNameFromId(data.id);\n    const namespace = ResponseParser.parseNamespaceFromId(data.id, resourceName);\n    if (alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n      return alias.replace(regex, (match, g1, g2) => {\n        const group = g1 || g2;\n\n        if (group === 'resourcegroup') {\n          return resourceGroup;\n        } else if (group === 'namespace') {\n          return namespace;\n        } else if (group === 'resourcename') {\n          return resourceName;\n        } else if (group === 'metric') {\n          return data.name.value;\n        } else if (group === 'dimensionname') {\n          return metadatavalues && metadatavalues.length > 0 ? metadatavalues[0].name.value : '';\n        }  else if (group === 'dimensionvalue') {\n          return metadatavalues && metadatavalues.length > 0 ? metadatavalues[0].value : '';\n        }\n\n        return match;\n      });\n    }\n\n    if (metadatavalues && metadatavalues.length > 0) {\n      return `${resourceName}{${metadatavalues[0].name.value}=${metadatavalues[0].value}}.${data.name.value}`;\n    }\n\n    return `${resourceName}.${data.name.value}`;\n  }\n\n  static parseResourceGroupFromId(id: string) {\n    const startIndex = id.indexOf('/resourceGroups/') + 16;\n    const endIndex = id.indexOf('/providers');\n\n    return id.substring(startIndex, endIndex);\n  }\n\n  static parseNamespaceFromId(id: string, resourceName: string) {\n    const startIndex = id.indexOf('/providers/') + 11;\n    const endIndex = id.indexOf('/' + resourceName);\n\n    return id.substring(startIndex, endIndex);\n  }\n\n  static parseResourceNameFromId(id: string) {\n    const endIndex = id.lastIndexOf('/providers');\n    const startIndex = id.slice(0, endIndex).lastIndexOf('/') + 1;\n\n    return id.substring(startIndex, endIndex);\n  }\n\n  static convertDataToPoints(timeSeriesData) {\n    const dataPoints: any[] = [];\n\n    for (let k = 0; k < timeSeriesData.length; k++) {\n      const epoch = ResponseParser.dateTimeToEpoch(timeSeriesData[k].timeStamp);\n      const aggKey = ResponseParser.getKeyForAggregationField(timeSeriesData[k]);\n\n      if (aggKey) {\n        dataPoints.push([timeSeriesData[k][aggKey], epoch]);\n      }\n    }\n\n    return dataPoints;\n  }\n\n  static dateTimeToEpoch(dateTime) {\n    return moment(dateTime).valueOf();\n  }\n\n  static getKeyForAggregationField(dataObj) {\n    const keys = _.keys(dataObj);\n    if (keys.length < 2) {\n      return;\n    }\n\n    return _.intersection(keys, ['total', 'average', 'maximum', 'minimum', 'count']);\n  }\n\n  static parseResponseValues(result: any, textFieldName: string, valueFieldName: string) {\n    const list: any[] = [];\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (! _.find(list, ['value', _.get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          text: _.get(result.data.value[i], textFieldName),\n          value: _.get(result.data.value[i], valueFieldName)\n        });\n      }\n    }\n    return list;\n  }\n\n  static parseResourceNames(result: any, metricDefinition: string) {\n    const list: any[] = [];\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (result.data.value[i].type === metricDefinition) {\n        list.push({\n          text: result.data.value[i].name,\n          value: result.data.value[i].name\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseMetadata(result: any, metricName: string) {\n    const metricData = _.find(result.data.value, o => {\n      return _.get(o, 'name.value') === metricName;\n    });\n\n    const defaultAggTypes = ['None', 'Average', 'Minimum', 'Maximum', 'Total', 'Count'];\n\n    return {\n      primaryAggType: metricData.primaryAggregationType,\n      supportedAggTypes: metricData.supportedAggregationTypes || defaultAggTypes,\n      supportedTimeGrains: ResponseParser.parseTimeGrains(metricData.metricAvailabilities || []),\n      dimensions: ResponseParser.parseDimensions(metricData)\n    };\n  }\n\n  static parseTimeGrains(metricAvailabilities) {\n    const timeGrains: any[] = [];\n    metricAvailabilities.forEach(avail => {\n      if (avail.timeGrain) {\n        timeGrains.push({\n          text: TimeGrainConverter.createTimeGrainFromISO8601Duration(avail.timeGrain),\n          value: avail.timeGrain}\n        );\n      }\n    });\n    return timeGrains;\n  }\n\n  static parseDimensions(metricData: any) {\n    const dimensions: any[] = [];\n    if (!metricData.dimensions || metricData.dimensions.length === 0) {\n      return dimensions;\n    }\n\n    if (!metricData.isDimensionRequired) {\n      dimensions.push({text: 'None', value: 'None'});\n    }\n\n    for (let i = 0; i < metricData.dimensions.length; i++) {\n      dimensions.push({\n        text: metricData.dimensions[i].localizedValue,\n        value: metricData.dimensions[i].value\n      });\n    }\n    return dimensions;\n  }\n}\n","export default class SupportedNamespaces {\n  supportedMetricNamespaces = {\n    'azuremonitor': [\n      'Microsoft.Compute',\n      'Microsoft.ClassicCompute',\n      'Microsoft.Storage',\n      'Microsoft.Sql',\n      'Microsoft.Web',\n      'Microsoft.EventHub',\n      'Microsoft.ServiceBus',\n      'Microsoft.Devices',\n      'Microsoft.DocumentDb',\n      'Microsoft.Network',\n      'Microsoft.Cache/Redis',\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.Automation/automationAccounts',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.CustomerInsights/hubs',\n      'Microsoft.DataLakeAnalytics/accounts',\n      'Microsoft.DataLakeStore/accounts',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Logic/workflows',\n      'Microsoft.NotificationHubs/Namespaces/NotificationHubs',\n      'Microsoft.Search/searchServices',\n      'Microsoft.StreamAnalytics/streamingjobs',\n      'Microsoft.DataFactory/datafactories',\n      'Microsoft.DataFactory/factories',\n      'Microsoft.KeyVaults/vaults',\n      'Microsoft.LocationBasedServices/accounts',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces'\n    ],\n    'govazuremonitor': [\n      'Microsoft.AnalysisServices/Servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.Compute/virtualMachineScaleSets/virtualMachines',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.Devices/ElasticPools',\n      'Microsoft.Devices/ElasticPools/IotHubtTenants',\n      'Microsoft.EventHubs/namespaces',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/publicIPAdresses',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.NotificationHubs/Namespaces/NotificationHubs',\n      'Microsoft.PowerBiDedicated/capacities',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/servers',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools'\n    ],\n    'germanyazuremonitor': [\n      'Microsoft.AnalysisServices/Servers',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.Compute/virtualMachineScaleSets/virtualMachines',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.Devices/ElasticPools',\n      'Microsoft.Devices/ElasticPools/IotHubtTenants',\n      'Microsoft.EventHubs/namespaces',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/publicIPAdresses',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.NotificationHubs/Namespaces/NotificationHubs',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/servers',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools'\n    ],\n    'chinaazuremonitor': [\n      'Microsoft.AnalysisServices/Servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.Compute/virtualMachineScaleSets/virtualMachines',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.Devices/ElasticPools',\n      'Microsoft.Devices/ElasticPools/IotHubtTenants',\n      'Microsoft.EventHubs/namespaces',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/publicIPAdresses',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.NotificationHubs/Namespaces/NotificationHubs',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/servers',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools'\n    ]\n  };\n\n  constructor(private cloudName: string) {}\n\n  get() {\n    return this.supportedMetricNamespaces[this.cloudName];\n  }\n}\n","///<reference path=\"../../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\n\nimport _ from 'lodash';\nimport AppInsightsQuerystringBuilder from './app_insights_querystring_builder';\nimport ResponseParser from './response_parser';\n\nexport default class AppInsightsDatasource {\n  id: number;\n  url: string;\n  baseUrl: string;\n  version = 'beta';\n  applicationId: string;\n\n  constructor(instanceSettings, private backendSrv, private templateSrv, private $q) {\n    this.id = instanceSettings.id;\n    this.applicationId = instanceSettings.jsonData.appInsightsAppId;\n    this.baseUrl = `/appinsights/${this.version}/apps/${this.applicationId}/metrics`;\n    this.url = instanceSettings.url;\n  }\n\n  isConfigured() {\n    return this.applicationId && this.applicationId.length > 0;\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(target => {\n      const item = target.appInsights;\n      const querystringBuilder = new AppInsightsQuerystringBuilder(\n        options.range.from,\n        options.range.to,\n        options.interval\n      );\n\n      if (item.groupBy !== 'none') {\n        querystringBuilder.setGroupBy(this.templateSrv.replace(item.groupBy, options.scopedVars));\n      }\n      querystringBuilder.setAggregation(item.aggregation);\n      querystringBuilder.setInterval(\n        item.timeGrainType,\n        this.templateSrv.replace(item.timeGrain, options.scopedVars),\n        item.timeGrainUnit\n      );\n\n      querystringBuilder.setFilter(this.templateSrv.replace((item.filter || '')));\n\n      const url = `${this.baseUrl}/${this.templateSrv.replace(\n        item.metricName,\n        options.scopedVars\n      )}?${querystringBuilder.generate()}`;\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        url: url,\n        format: options.format,\n        alias: item.alias,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    const promises = this.doQueries(queries);\n\n    return this.$q.all(promises).then(results => {\n      return new ResponseParser(results).parseQueryResult();\n    });\n  }\n\n  doQueries(queries) {\n    return _.map(queries, query => {\n      return this.doRequest(query.url).then(result => {\n        return {\n          result: result,\n          query: query,\n        };\n      }).catch(err => {\n        throw {\n          error: err,\n          query: query\n        };\n      });\n    });\n  }\n\n  annotationQuery(options) {}\n\n  metricFindQuery(query: string) {\n    const appInsightsMetricNameQuery = query.match(/^AppInsightsMetricNames\\(\\)/i);\n    if (appInsightsMetricNameQuery) {\n      return this.getMetricNames();\n    }\n\n    const appInsightsGroupByQuery = query.match(/^AppInsightsGroupBys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (appInsightsGroupByQuery) {\n      const metricName = appInsightsGroupByQuery[1];\n      return this.getGroupBys(this.templateSrv.replace(metricName));\n    }\n  }\n\n  testDatasource() {\n    const url = `${this.baseUrl}/metadata`;\n    return this.doRequest(url)\n      .then(response => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Application Insights service.',\n            title: 'Success',\n          };\n        }\n      })\n      .catch(error => {\n        let message = 'Application Insights: ';\n        message += error.statusText ? error.statusText + ': ' : '';\n\n        if (error.data && error.data.error && error.data.error.code === 'PathNotFoundError') {\n          message += 'Invalid Application Id for Application Insights service.';\n        } else if (error.data && error.data.error) {\n          message += error.data.error.code + '. ' + error.data.error.message;\n        } else {\n          message += 'Cannot connect to Application Insights REST API.';\n        }\n\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  doRequest(url, maxRetries = 1) {\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch(error => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n\n  getMetricNames() {\n    const url = `${this.baseUrl}/metadata`;\n    return this.doRequest(url).then(ResponseParser.parseMetricNames);\n  }\n\n  getMetricMetadata(metricName: string) {\n    const url = `${this.baseUrl}/metadata`;\n    return this.doRequest(url).then(result => {\n      return new ResponseParser(result).parseMetadata(metricName);\n    });\n  }\n\n  getGroupBys(metricName: string) {\n    return this.getMetricMetadata(metricName).then(result => {\n      return new ResponseParser(result).parseGroupBys();\n    });\n  }\n}\n","///<reference path=\"../../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport TimeGrainConverter from '../time_grain_converter';\n\nexport default class AppInsightsQuerystringBuilder {\n  aggregation = '';\n  groupBy = '';\n  timeGrainType = '';\n  timeGrain = '';\n  timeGrainUnit = '';\n  filter = '';\n\n  constructor(private from, private to, public grafanaInterval) {\n  }\n\n  setAggregation(aggregation) {\n    this.aggregation = aggregation;\n  }\n\n  setGroupBy(groupBy) {\n    this.groupBy = groupBy;\n  }\n\n  setInterval(timeGrainType, timeGrain, timeGrainUnit) {\n    this.timeGrainType = timeGrainType;\n    this.timeGrain = timeGrain;\n    this.timeGrainUnit = timeGrainUnit;\n  }\n\n  setFilter(filter: string) {\n    this.filter = filter;\n  }\n\n  generate() {\n    let querystring = `timespan=${this.from.utc().format()}/${this.to.utc().format()}`;\n\n    if (this.aggregation && this.aggregation.length > 0) {\n      querystring += `&aggregation=${this.aggregation}`;\n    }\n\n    if (this.groupBy && this.groupBy.length > 0) {\n      querystring += `&segment=${this.groupBy}`;\n    }\n\n    if (this.timeGrainType === 'specific' && this.timeGrain && this.timeGrainUnit) {\n      querystring += `&interval=${TimeGrainConverter.createISO8601Duration(this.timeGrain, this.timeGrainUnit)}`;\n    }\n\n    if (this.timeGrainType === 'auto') {\n      querystring += `&interval=${TimeGrainConverter.createISO8601DurationFromInterval(this.grafanaInterval)}`;\n    }\n\n    if (this.filter) {\n      querystring += `&filter=${this.filter}`;\n    }\n\n    return querystring;\n  }\n}\n","///<reference path=\"../../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\n\nimport moment from 'moment';\nimport _ from 'lodash';\n\nexport default class ResponseParser {\n  constructor(private results) {}\n\n  parseQueryResult() {\n    let data: any[] = [];\n    for (let i = 0; i < this.results.length; i++) {\n      const value = this.results[i].result.data.value;\n      const alias = this.results[i].query.alias;\n      data = _.concat(data, this.parseQueryResultRow(value, alias));\n    }\n\n    return data;\n  }\n\n  parseQueryResultRow(value, alias: string) {\n    const data: any[] = [];\n\n    if (ResponseParser.isSingleValue(value)) {\n      const metricName = ResponseParser.getMetricFieldKey(value);\n      const aggField = ResponseParser.getKeyForAggregationField(value[metricName]);\n      const epoch = ResponseParser.dateTimeToEpoch(value.end);\n      data.push({ target: metricName, datapoints: [[value[metricName][aggField], epoch]] });\n      return data;\n    }\n\n    const groupedBy = ResponseParser.hasSegmentsField(value.segments[0]);\n    if (!groupedBy) {\n      const metricName = ResponseParser.getMetricFieldKey(value.segments[0]);\n      const dataTarget = ResponseParser.findOrCreateBucket(data, metricName);\n\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n        const aggField = ResponseParser.getKeyForAggregationField(value.segments[i][metricName]);\n\n        dataTarget.datapoints.push([value.segments[i][metricName][aggField], epoch]);\n      }\n    } else {\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n\n        for (let j = 0; j < value.segments[i].segments.length; j++) {\n          const metricName = ResponseParser.getMetricFieldKey(value.segments[i].segments[j]);\n          const aggField = ResponseParser.getKeyForAggregationField(value.segments[i].segments[j][metricName]);\n          const target = this.getTargetName(value.segments[i].segments[j], alias);\n\n          const bucket = ResponseParser.findOrCreateBucket(data, target);\n          bucket.datapoints.push([value.segments[i].segments[j][metricName][aggField], epoch]);\n        }\n      }\n    }\n\n    return data;\n  }\n\n  getTargetName(segment, alias: string) {\n    let metric = '';\n    let segmentName = '';\n    let segmentValue = '';\n    for (let prop in segment) {\n      if (_.isObject(segment[prop])) {\n        metric = prop;\n      } else {\n        segmentName = prop;\n        segmentValue = segment[prop];\n      }\n    }\n\n    if (alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n      return alias.replace(regex, (match, g1, g2) => {\n        const group = g1 || g2;\n\n        if (group === 'metric') {\n          return metric;\n        } else if (group === 'groupbyname') {\n          return segmentName;\n        } else if (group === 'groupbyvalue') {\n          return segmentValue;\n        }\n\n        return match;\n      });\n    }\n\n    return metric + `{${segmentName}=\"${segmentValue}\"}`;\n  }\n\n  static isSingleValue(value) {\n    return !ResponseParser.hasSegmentsField(value);\n  }\n\n  static findOrCreateBucket(data, target) {\n    let dataTarget = _.find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [] };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static hasSegmentsField(obj) {\n    const keys = _.keys(obj);\n    return _.indexOf(keys, 'segments') > -1;\n  }\n\n  static getMetricFieldKey(segment) {\n    const keys = _.keys(segment);\n\n    return _.filter(_.without(keys, 'start', 'end'), key => {\n      return _.isObject(segment[key]);\n    })[0];\n  }\n\n  static getKeyForAggregationField(dataObj) {\n    const keys = _.keys(dataObj);\n    return _.intersection(keys, ['sum', 'avg', 'min', 'max', 'count', 'unique']);\n  }\n\n  static dateTimeToEpoch(dateTime) {\n    return moment(dateTime).valueOf();\n  }\n\n  static parseMetricNames(result) {\n    const keys = _.keys(result.data.metrics);\n\n    return ResponseParser.toTextValueList(keys);\n  }\n\n  parseMetadata(metricName: string) {\n    const metric = this.results.data.metrics[metricName];\n\n    if (!metric) {\n      throw Error(\"No data found for metric: \" + metricName);\n    }\n\n    return {\n      primaryAggType: metric.defaultAggregation,\n      supportedAggTypes: metric.supportedAggregations,\n      supportedGroupBy: metric.supportedGroupBy.all,\n    };\n  }\n\n  parseGroupBys() {\n    return ResponseParser.toTextValueList(this.results.supportedGroupBy);\n  }\n\n  static toTextValueList(values) {\n    const list: any[] = [];\n    for (let i = 0; i < values.length; i++) {\n      list.push({\n        text: values[i],\n        value: values[i],\n      });\n    }\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport {QueryCtrl} from 'grafana/app/plugins/sdk';\nimport 'style-loader!./css/query_editor.css';\nimport TimegrainConverter from './time_grain_converter';\n// import * as monaco from 'monaco-editor';\n\nexport class AzureMonitorQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  lastQueryError?: string;\n\n  defaultDropdownValue = 'select';\n\n  defaults = {\n    queryType: 'Azure Monitor',\n    azureMonitor: {\n      resourceGroup: this.defaultDropdownValue,\n      metricDefinition: this.defaultDropdownValue,\n      resourceName: this.defaultDropdownValue,\n      metricName: this.defaultDropdownValue,\n      dimensionFilter: '*',\n      timeGrain: 'auto'\n    },\n    appInsights: {\n      metricName: this.defaultDropdownValue,\n      groupBy: 'none',\n      timeGrainType: 'auto'\n    }\n  };\n\n  /** @ngInject **/\n  constructor($scope, $injector, private templateSrv) {\n    super($scope, $injector);\n\n    _.defaultsDeep(this.target, this.defaults);\n    this.migrateTimeGrains();\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n\n    // monaco.editor.create(document.getElementById('container'), {\n    //   value: [\n    //     'function x() {',\n    //     '\\tconsole.log(\"Hello world!\");',\n    //     '}'\n    //   ].join('\\n'),\n    //   language: 'javascript'\n    // });\n  }\n\n  onDataReceived(dataList) {\n    this.lastQueryError = undefined;\n  }\n\n  onDataError(err) {\n    this.handleQueryCtrlError(err);\n  }\n\n  handleQueryCtrlError(err) {\n    if (err.query && err.query.refId && err.query.refId !== this.target.refId) {\n      return;\n    }\n\n    if (err.error && err.error.data && err.error.data.error) {\n      this.lastQueryError = err.error.data.error.message;\n    } else if (err.error && err.error.data) {\n      this.lastQueryError = err.error.data.message;\n    } else if (err.data && err.data.error) {\n      this.lastQueryError = err.data.error.message;\n    } else if (err.data && err.data.message) {\n      this.lastQueryError = err.data.message;\n    } else {\n      this.lastQueryError = err;\n    }\n  }\n\n  migrateTimeGrains() {\n    if (this.target.azureMonitor.timeGrainUnit) {\n\n      if (this.target.azureMonitor.timeGrain !== 'auto') {\n        this.target.azureMonitor.timeGrain =\n          TimegrainConverter.createISO8601Duration(this.target.azureMonitor.timeGrain, this.target.azureMonitor.timeGrainUnit);\n      }\n\n      delete this.target.azureMonitor.timeGrainUnit;\n      this.onMetricNameChange();\n    }\n  }\n\n  replace(variable: string) {\n    return this.templateSrv.replace(variable, this.panelCtrl.panel.scopedVars);\n  }\n\n  /* Azure Monitor Section */\n  getResourceGroups(query) {\n    if (this.target.queryType !== 'Azure Monitor' || !this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.getResourceGroups().catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getMetricDefinitions(query) {\n    if (this.target.queryType !== 'Azure Monitor' || !this.target.azureMonitor.resourceGroup\n      || this.target.azureMonitor.resourceGroup === this.defaultDropdownValue) {\n      return;\n    }\n    return this.datasource.getMetricDefinitions(this.replace(this.target.azureMonitor.resourceGroup))\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getResourceNames(query) {\n    if (this.target.queryType !== 'Azure Monitor' || !this.target.azureMonitor.resourceGroup\n      || this.target.azureMonitor.resourceGroup === this.defaultDropdownValue || !this.target.azureMonitor.metricDefinition\n      || this.target.azureMonitor.metricDefinition === this.defaultDropdownValue) {\n      return;\n    }\n\n    const rg = this.templateSrv.replace(this.target.azureMonitor.resourceGroup, this.panelCtrl.panel.scopedVars);\n\n    return this.datasource.getResourceNames(\n      this.replace(this.target.azureMonitor.resourceGroup),\n      this.replace(this.target.azureMonitor.metricDefinition)\n    ).catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getMetricNames(query) {\n    if (this.target.queryType !== 'Azure Monitor' || !this.target.azureMonitor.resourceGroup\n      || this.target.azureMonitor.resourceGroup === this.defaultDropdownValue || !this.target.azureMonitor.metricDefinition\n      || this.target.azureMonitor.metricDefinition === this.defaultDropdownValue || !this.target.azureMonitor.resourceName\n      || this.target.azureMonitor.resourceName === this.defaultDropdownValue) {\n      return;\n    }\n\n    return this.datasource.getMetricNames(\n      this.replace(this.target.azureMonitor.resourceGroup),\n      this.replace(this.target.azureMonitor.metricDefinition),\n      this.replace(this.target.azureMonitor.resourceName)\n    ).catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  onResourceGroupChange() {\n    this.target.azureMonitor.metricDefinition = this.defaultDropdownValue;\n    this.target.azureMonitor.resourceName = this.defaultDropdownValue;\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.dimensions = [];\n    this.target.azureMonitor.dimension = '';\n  }\n\n  onMetricDefinitionChange() {\n    this.target.azureMonitor.resourceName = this.defaultDropdownValue;\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.dimensions = [];\n    this.target.azureMonitor.dimension = '';\n  }\n\n  onResourceNameChange() {\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.dimensions = [];\n    this.target.azureMonitor.dimension = '';\n  }\n\n  onMetricNameChange() {\n    if (!this.target.azureMonitor.metricName || this.target.azureMonitor.metricName === this.defaultDropdownValue) {\n      return;\n    }\n\n    return this.datasource.getMetricMetadata(\n      this.replace(this.target.azureMonitor.resourceGroup),\n      this.replace(this.target.azureMonitor.metricDefinition),\n      this.replace(this.target.azureMonitor.resourceName),\n      this.replace(this.target.azureMonitor.metricName)\n    ).then(metadata => {\n      this.target.azureMonitor.aggOptions = metadata.supportedAggTypes || [metadata.primaryAggType];\n      this.target.azureMonitor.aggregation = metadata.primaryAggType;\n      this.target.azureMonitor.timeGrains = [{text: 'auto', value: 'auto'}].concat(metadata.supportedTimeGrains);\n\n      this.target.azureMonitor.dimensions = metadata.dimensions;\n      if (metadata.dimensions.length > 0) {\n        this.target.azureMonitor.dimension = metadata.dimensions[0].value;\n      }\n      return this.refresh();\n    }).catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getAutoInterval() {\n    if (this.target.azureMonitor.timeGrain === 'auto') {\n      return TimegrainConverter.findClosestTimeGrain(\n        this.panelCtrl.interval,\n        _.map(this.target.azureMonitor.timeGrains, o => TimegrainConverter.createKbnUnitFromISO8601Duration(o.value))\n        || ['1m', '5m', '15m', '30m', '1h', '6h', '12h', '1d']\n      );\n    }\n\n    return '';\n  }\n\n  /* Application Insights Section */\n\n  getAppInsightsAutoInterval() {\n    if (this.panelCtrl.interval[this.panelCtrl.interval.length - 1] === 's') {\n      return '1m';\n    }\n    return this.panelCtrl.interval;\n  }\n  getAppInsightsMetricNames() {\n    if (!this.datasource.appInsightsDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.getAppInsightsMetricNames().catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  onAppInsightsMetricNameChange() {\n    if (!this.target.appInsights.metricName || this.target.appInsights.metricName === this.defaultDropdownValue) {\n      return;\n    }\n\n    return this.datasource.getAppInsightsMetricMetadata(this.replace(this.target.appInsights.metricName))\n      .then(aggData => {\n        this.target.appInsights.aggOptions = aggData.supportedAggTypes;\n        this.target.appInsights.groupByOptions = aggData.supportedGroupBy;\n        this.target.appInsights.aggregation = aggData.primaryAggType;\n        return this.refresh();\n      }).catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getAppInsightsGroupBySegments(query) {\n    return _.map(this.target.appInsights.groupByOptions, option => {\n      return {text: option, value: option};\n    });\n  }\n\n  resetAppInsightsGroupBy() {\n    this.target.appInsights.groupBy = 'none';\n    this.refresh();\n  }\n\n  updateTimeGrainType() {\n    if (this.target.appInsights.timeGrainType === 'specific') {\n      this.target.appInsights.timeGrain = '1';\n      this.target.appInsights.timeGrainUnit = 'minute';\n    } else {\n      this.target.appInsights.timeGrain = '';\n    }\n    this.refresh();\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__16__;","\nvar content = require(\"!!../../node_modules/style-loader/index.js!../../node_modules/css-loader/index.js??ref--5-1!./query_editor.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/style-loader/index.js!../../node_modules/css-loader/index.js??ref--5-1!./query_editor.css\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/style-loader/index.js!../../node_modules/css-loader/index.js??ref--5-1!./query_editor.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\nvar content = require(\"!!../../node_modules/css-loader/index.js??ref--5-1!./query_editor.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js??ref--5-1!./query_editor.css\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js??ref--5-1!./query_editor.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".min-width-10 {\\n  min-width: 10rem;\\n}\\n\\n.min-width-12 {\\n  min-width: 12rem;\\n}\\n\\n.min-width-20 {\\n  min-width: 20rem;\\n}\\n\\n.gf-form-select-wrapper select.gf-form-input {\\n  height: 2.64rem;\\n}\\n\\n.gf-form-select-wrapper--caret-indent.gf-form-select-wrapper::after {\\n  right: 0.775rem\\n}\\n\\n.service-dropdown {\\n  width: 12rem;\\n}\\n\\n.aggregation-dropdown-wrapper {\\n  max-width: 29.1rem;\\n}\\n\\n.timegrainunit-dropdown-wrapper {\\n  width: 8rem;\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"/home/daniel/dev/go/src/github.com/grafana/grafana/data/plugins/grafana-azure-monitor-datasource/src/css/query_editor.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,iBAAiB;CAClB;;AAED;EACE,iBAAiB;CAClB;;AAED;EACE,iBAAiB;CAClB;;AAED;EACE,gBAAgB;CACjB;;AAED;EACE,eAAe;CAChB;;AAED;EACE,aAAa;CACd;;AAED;EACE,mBAAmB;CACpB;;AAED;EACE,YAAY;CACb\",\"file\":\"query_editor.css\",\"sourcesContent\":[\".min-width-10 {\\n  min-width: 10rem;\\n}\\n\\n.min-width-12 {\\n  min-width: 12rem;\\n}\\n\\n.min-width-20 {\\n  min-width: 20rem;\\n}\\n\\n.gf-form-select-wrapper select.gf-form-input {\\n  height: 2.64rem;\\n}\\n\\n.gf-form-select-wrapper--caret-indent.gf-form-select-wrapper::after {\\n  right: 0.775rem\\n}\\n\\n.service-dropdown {\\n  width: 12rem;\\n}\\n\\n.aggregation-dropdown-wrapper {\\n  max-width: 29.1rem;\\n}\\n\\n.timegrainunit-dropdown-wrapper {\\n  width: 8rem;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n","\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n","export class AzureMonitorConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n\n  constructor($scope) {\n    this.current.jsonData.cloudName = this.current.jsonData.cloudName || 'azuremonitor';\n  }\n}\n"],"sourceRoot":""}